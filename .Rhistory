summary(pca)
factanal(data, factors = 2)
cumsum(eigen(cor(data))$values/sum(eigen(cor(data))$values))
#Hierarchické clustering
crabs.hcl <- hclust(dist(data))
plot(crabs.hcl)
rect.hclust(crabs.hcl, k=4, border="red")
# mám rozdělení do 4 skupin
crabs.reg <- cutree(crabs.hcl, k=4)
cumsum(eigen(cor(data))$values/sum(eigen(cor(data))$values))
factanal(data, factors = 2)
pca <- prcomp(data)
summary(pca) #tady lze vidět, že první komponenta vysvětluje 98%, takže stačí jedna proměnná
cumsum(eigen(cor(data))$values/sum(eigen(cor(data))$values))
summary(pca) #tady lze vidět, že první komponenta vysvětluje 98%, takže stačí jedna proměnná
data_filtered <- data [,1:2]
data_filtered
data_filtered <- data [,1:1]
data_filtered
data_filtered <- data [,1]
data_filtered
factanal(data, factors = 2)
cumsum(eigen(cor(data))$values/sum(eigen(cor(data))$values))
cluter2<- kmeans(data_filtered, k=2)
cluter2<- kmeans(data_filtered, 2)
summary(cluster2)
cluster2<- kmeans(data_filtered, 2)
summary(cluster2)
cluster2<- kmeans(data_filtered, 2)
cluster3<-hclust(dist(data_filtered))
data_filtered <- data [,1] #<- vezmeme jenom jendu komponentu
cluster2<- kmeans(data_filtered, 2)
cluster3<-hclust(dist(data_filtered))
cl3.cut <- cutree(cluster3, k=2)
table(cl3.cut,cluster2$cluster)
plot(cluster3)
rect.hclust(hcluster3, k=4, border="red")
plot(cluster3)
rect.hclust(hcluster3, k=2, border="red")
plot(cluster3)
rect.hclust(cluster3, k=2, border="red")
## Kanonicka korelace
#	korelace mezi dvema skupinami promennych
# pracujme s charakteristikami statu: osobni uspory, podil populace do 15 let,
#	podil populace nad 75 let, prijem na obyvatele, narust prijmu na obyvatele
# rozdelime promenne do skupin: populacni podily, ekonomicke charakteristiky
pop <- LifeCycleSavings[, 2:3]
oec <- LifeCycleSavings[, -(2:3)]
cancor(pop, oec)
## Kanonicka korelace
#	korelace mezi dvema skupinami promennych
# pracujme s charakteristikami statu: osobni uspory, podil populace do 15 let,
#	podil populace nad 75 let, prijem na obyvatele, narust prijmu na obyvatele
# rozdelime promenne do skupin: populacni podily, ekonomicke charakteristiky
pop <- LifeCycleSavings[, 2:3]
oec <- LifeCycleSavings[, -(2:3)]
cancor(pop, oec)
2+2
LifeCycleSavings
## Korespondencni analyza
#########################
## Korespondencni analyza
#	zpusob, jak graficky znazornit vztah mezi dvema kategorickymi promennymi
library(ca)
data("author")
# prodej knih v knihkupectvich
fit<-ca(author)
print(fit)			# zakladni vystupy
# chi-kvadrat, inertia, souradnice
summary(fit) 		# dalsi vystupy
plot(fit) 			# zakladni graf
# body, ktere jsou k sobe blizko si jsou podobne
plot(fit, mass = TRUE, contrib = "absolute", map ="rowgreen", arrows = c(FALSE, TRUE))
data(smoke)
# fiktivni data o koureni ve firme
fit2 <- ca(smoke)
plot(fit2)
## Korespondencni analyza
#########################
## Korespondencni analyza
#	zpusob, jak graficky znazornit vztah mezi dvema kategorickymi promennymi
library(ca)
data("author")
# prodej knih v knihkupectvich
fit<-ca(author)
print(fit)			# zakladni vystupy
# chi-kvadrat, inertia, souradnice
summary(fit) 		# dalsi vystupy
plot(fit) 			# zakladni graf
# body, ktere jsou k sobe blizko si jsou podobne
plot(fit, mass = TRUE, contrib = "absolute", map ="rowgreen", arrows = c(FALSE, TRUE))
data(smoke)
library(ca)
install.packages("ca")
library(ca)
data("author")
# prodej knih v knihkupectvich
fit<-ca(author)
print(fit)			# zakladni vystupy
# chi-kvadrat, inertia, souradnice
summary(fit) 		# dalsi vystupy
library(ca)
data("author")
# prodej knih v knihkupectvich
fit<-ca(author)
print(fit)			# zakladni vystupy
# chi-kvadrat, inertia, souradnice
summary(fit) 		# dalsi vystupy
plot(fit) 			# zakladni graf
library(ca)
data("author")
# chi-kvadrat, inertia, souradnice
summary(fit) 		# dalsi vystupy
plot(fit) 			# zakladni graf
# body, ktere jsou k sobe blizko si jsou podobne
plot(fit, mass = TRUE, contrib = "absolute", map ="rowgreen", arrows = c(FALSE, TRUE))
data(smoke)
# fiktivni data o koureni ve firme
fit2 <- ca(smoke)
plot(fit2)
# oddeleni SE kouri nejmene a JM naopak nejvice
summary(fit2)
library(ca)
data("author")
# prodej knih v knihkupectvich
fit<-ca(author)
print(fit)			# zakladni vystupy
# chi-kvadrat, inertia, souradnice
summary(fit) 		# dalsi vystupy
View(cluster3)
load("D:/PSM_TEACH/PSM_Teach/Ichs.RData")
data <- Ichs
data
data["Cholest"]
#Zavislost hmotnosti na vysce
hmot <- data$hmot
vyska <- data$vyska
plot(hmot~vyska)
plot(hmot~vyska,pch=19)
# Model lin. regrese
model <- lm(hmot~vyska)
coef(model)
summary(model)
AIC(model)
BIC(model)
# Akaikeho a Bayesovske kriterium
AIC(model)
BIC(model)
coef(model)
summary(model)
# Akaikeho a Bayesovske kriterium
#- pomahi vybrat model, který nejlépe vyvětluje data při zohlednění počtu parametru
#- najít rovnováhu mezi složitostí modelu a jeho schopností dobře popsat data.
AIC(model)
BIC(model)
plot(model)
#Testy předpokladů
par(mfrow=c(2,2))
plot(model)
par(mfrow=c(1,1))
# 2. test normality residuí
shapiro.test(residuals(model))
# 2. test normality residuí
# H0: maji residua normalni rozdeleni | H1: NEmaji residua norm. rozd...
shapiro.test(residuals(model))
library(lmtest)
install.packages("lmtest")
library(lmtest)
bptest(model)
PlotQQ(model)
QQPlot(model)
# 4. Cookova vzdálenost
cook.ditance(model)
# 4. Cookova vzdálenost
cook.distance(model)
# 4. Cookova vzdálenost
cooks.distance(model)
# 4. Cookova vzdálenost
cooks.distance(model)[which.max(cooks.distance(model))]
# 5. Vlivnost pozorování
influence.measures(model)
summary(influence.measures(model))
hmot <- data$hmot
syst <- data$syst
diast<-data$diast
hmot <- data$hmot
syst <- data$syst
diast<-data$diast
plot(hmot~syst, pch=19, main="Hmot X Syst")
plot(hmot~diast,pch=19, main="Hmot X Diast")
plot(hmot~syst, pch=19, main="Hmot X Syst")
plot(hmot~diast,pch=19, main="Hmot X Diast")
model <- lm(hmot~syst+diast)
summary(model)
coef(model)
model <- lm(hmot~syst+diast)
summary(model)
# Předpoklady
par(mfrow=c(2,2))
plot(model)
par(mfrow=c(1,1))
shapiro.test(residuals(model))
model2 <- lm(hmot~diast)
model2 <- lm(hmot~diast)
summary(model2)
# Závislost dias a syst
cor(syst,diast)
model <- lm(hmot~syst+diast)
summary(model)
plot(hmot~syst, pch=19, main="Hmot X Syst")
plot(hmot~diast,pch=19, main="Hmot X Diast")
model2 <- lm(hmot~diast)
summary(model2)
model3 <- lm(hmot~smoke)
smoke <- data$Kour
hmot <- data$hmot
model3 <- lm(hmot~smoke)
summary(model3)
plot(model,pch=19)
model3 <- lm(hmot~smoke)
plot(model3)
boxplot(model3)
boxplot(hmot~smoke)
summary(model3)
# Anova
#H0 <- hmotnost se NElisi vuci skupinam | H1 <- hmotnost se lisi vuci skupinam
anova(model3)
# Jak hmotnost zavisi na koureni a cholesterolu?
chol <- data$Cholest
kour <- data$Kour
plotMeans(hmot, chol, kour)
#----------------------------------------------------------
#ANOVA - dvojne trideni - 2x kategoricka prom
library(RcmdrMisc)
plotMeans(hmot, chol, kour)
#----------------------------------------------------------
#ANOVA - dvojne trideni - 2x kategoricka prom
library(RcmdrMisc)
# Jak hmotnost zavisi na koureni a cholesterolu?
chol <- data$Cholest
kour <- data$Kour
plotMeans(hmot, chol, kour)
plotMeans(hmot, kour, chol, error.bars="se", connect=TRUE,legend.pos="farright"
# Jak hmotnost zavisi na koureni a cholesterolu?
chol <- data$Cholest
kour <- data$Kour
plotMeans(hmot, kour, chol, error.bars="se", connect=TRUE,legend.pos="farright"
plotMeans(hmot, kour, chol, error.bars="se", connect=TRUE,legend.pos="farright")
# Jak hmotnost zavisi na koureni a cholesterolu?
library(RcmdrMisc)
library(car)
Cholest<-Ichs$Cholest
plotMeans(hmot, Smok, Cholest, error.bars="se", connect=TRUE,legend.pos="farright")
plotMeans(hmot, Smok, Cholest, error.bars="conf.int", connect=TRUE,legend.pos="farright")
# Jak hmotnost zavisi na koureni a cholesterolu?
library(RcmdrMisc)
library(car)
Cholest<-Ichs$Cholest
plotMeans(hmot, smoke, Cholest, error.bars="se", connect=TRUE,legend.pos="farright")
plotMeans(hmot, smoke, Cholest, error.bars="conf.int", connect=TRUE,legend.pos="farright")
Anova(aov(hmot~smoke*Cholest))
# ANOVA pres regresni model
summary(lm(hmot~smoke*Cholest))
Anova(lm(hmot~smoke*Cholest))
# hmotnost se v zavislosti na jednotlivych promennych nelisi
Anova(lm(hmot~smoke))
plot(hmot~smoke)
Anova(aov(hmot~Cholest))
plot(hmot~Cholest)
# Jak hmotnost zavisi na koureni a cholesterolu?
library(RcmdrMisc)
library(car)
Cholest<-Ichs$Cholest
Cholest<-Ichs$Cholest
plotMeans(hmot, smoke, Cholest, error.bars="se", connect=TRUE,legend.pos="farright")
plotMeans(hmot, smoke, Cholest, error.bars="conf.int", connect=TRUE,legend.pos="farright")
Anova(aov(hmot~smoke*Cholest))
Cholest<-Ichs$Cholest
plotMeans(hmot, smoke, Cholest, error.bars="se", connect=TRUE,legend.pos="farright")
Anova(aov(hmot~smoke*Cholest))
# ANOVA pres regresni model
summary(lm(hmot~smoke*Cholest))
# hmotnost se v zavislosti na jednotlivych promennych nelisi
Anova(lm(hmot~smoke))
plot(hmot~smoke)
plot(hmot~smoke)
# hmotnost se v zavislosti na jednotlivych promennych nelisi
Anova(lm(hmot~smoke))
plot(hmot~smoke)
Anova(aov(hmot~Cholest))
Anova(aov(hmot~smoke*Cholest))
# ANOVA pres regresni model
summary(lm(hmot~smoke*Cholest))
# hmotnost se v zavislosti na jednotlivych promennych nelisi
Anova(lm(hmot~smoke))
plot(hmot~smoke)
Anova(aov(hmot~Cholest))
plot(hmot~Cholest)
cor(smoke,Cholse)
cor(smoke,Cholset)
cor(smoke,Cholest)
cor(as.factor(smoke),as.factor(Cholest))
hmot < hmot
chol <- Cholest
kour <- smoke
hmot <- hmot
chol <- Cholest
kour <- smoke
vyska <- data$vyska
m <- lm(hmot~kour*chol*vyska)
summary(m)
#Kroková regrese
#=> iterativně vytvařím modely, zjistím AIC a měním regresory, ten co má nejnižší AIC je nejoptimálnější
step(m)
#Kroková regrese
#=> iterativně vytvařím modely, zjistím AIC a měním regresory, ten co má nejnižší AIC je nejoptimálnější
step(lm(hmot~kour*chol*vyska))
AIC(lm(hmot~vyska))
AIC(lm(hmot~kour*vyska))
AIC(lm(hmot~kour*chol*vyska))
hmot <- hmot
syst <- syst
kour <- smoke
vyska <- data$vyska
m <- lm(syst~kour*hmot*vyska)
summary(m)
m <- lm(syst~kour+hmot+vyska)
summary(m)
m <- lm(syst~kour*hmot*vyska)
m <- lm(syst~kour*hmot*vyska)
summary(m)
model2<-lm(syst~hmot*Kour+vyska*Kour+vyska*hmot)
summary(model2)
hmot <- hmot
syst <- syst
kour <- smoke
vyska <- data$vyska
m <- lm(syst~kour*hmot*vyska)
summary(m)
model2<-lm(syst~hmot*kour+vyska*kour+vyska*hmot)
summary(model2)
#Kroková regrese
#=> iterativně vytvařím modely, zjistím AIC a měním regresory, ten co má nejnižší AIC je nejoptimálnější
step(lm(syst~kour*hmot*vyska))
#Kroková regrese
#=> iterativně vytvařím modely, zjistím AIC a měním regresory, ten co má nejnižší AIC je nejoptimálnější
step(lm(syst~kour*hmot*vyska))
#Optimální model
opt_m <- lm(formula = syst ~ kour * hmot * vyska)
summary(opt_m)
#Optimální model
opt_m <- lm(syst ~ kour * hmot * vyska)
summary(opt_m)
confint(m)
confint(lm(syst~hmot))
confint(lm(syst~hmot))
m <- lm(syst~kour*hmot*vyska)
summary(m)
#Kroková regrese
#=> iterativně vytvařím modely, zjistím AIC a měním regresory, ten co má nejnižší AIC je nejoptimálnější
step(lm(syst~kour*hmot*vyska))
#Optimální model
opt_m <- lm(syst ~ kour * hmot * vyska)
summary(opt_m)
#Kroková regrese
#=> iterativně vytvařím modely, zjistím AIC a měním regresory, ten co má nejnižší AIC je nejoptimálnější
step(lm(syst~kour+hmot+vyska))
summary(opt_m)
#### Logisticka regrese
library(datarium)
install.packages("datarium")
smpl<-sample(1:2201,150)
titanic<-titanic.raw
titanic.raw
#### Logisticka regrese
library(datarium)
library(car)
smpl<-sample(1:2201,150)
titanic
titanic<-titanic.raw[smpl,]
titanic.raw
titanic.raw
titanic<-titanic.raw[smpl,]
titanic
titanic.raw
titanic<-titanic.raw[smpl,]
titanic
titanic
titanic
titanic
titanic
titanic
titanic
titanic<-titanic.raw[smpl,]
titanic
titanic<-titanic.raw
titanic
titanic.raw
smpl<-sample(1:2201,150)
titanic<-titanic.raw[smpl,]
titanic
dependent <- titanic$Survived=="Yes"
dependent
dependent <- titanic$Survived=="Yes"
dependent
table(titanic$Survived,titanic$Class)
table(titanic$Survived,titanic$Age)
table(titanic$Survived,titanic$Sex)
# Závislost přeživších na jejich věkové skupině, třídě v lodi a pohlaví
m1 <- glm(dependent~titanic$Class+titanic$Age+titanic$Sex)
# Závislost přeživších na jejich věkové skupině, třídě v lodi a pohlaví
m1 <- glm(dependent~titanic$Class+titanic$Age+titanic$Sex, family="binomial")
summary(m1)
# Závislost přeživších na jejich věkové skupině, třídě v lodi a pohlaví
m1 <- glm(dependent~titanic$Class+titanic$Age+titanic$Sex)
summary(m1)
# Závislost přeživších na jejich věkové skupině, třídě v lodi a pohlaví
m1 <- glm(dependent~titanic$Class+titanic$Age+titanic$Sex, family="binomial")
summary(m1)
# Náhled nad daty
table(titanic$Survived,titanic$Class)
table(titanic$Survived,titanic$Age)
table(titanic$Survived,titanic$Sex)
# Závislost přeživších na jejich věkové skupině, třídě v lodi a pohlaví
m1 <- glm(dependent~titanic$Class+titanic$Age+titanic$Sex, family="binomial")
summary(m1)
(fmsb)
install.packages("fmsb")
library(fmsb)
NagelkerkeR2(mod1)
NagelkerkeR2(m1)
summary(m1)
Anova(m1)
Anova(m1, type="II")
Anova(m1)
Anova(m1)
b <- coef(m1)
b
1/exp(b[3])
# kolikrat se zvysuji sance na preziti u cestujicich v prvni tride oproti cestujicim ve treti tride
1/exp(b[4])
# kolikrat se zvysuji sance na preziti u cestujicich v prvni tride oproti cestujicim ve treti tride
1/exp(b[4])
# kolikrat se zvysuji sance na preziti u cestujicich v prvni tride oproti posadce
exp(b[5])
titanic$Class
1/exp(b[3])
b <- coef(m1)
b
# Jake sance na preziti ma dospely muz cestujici druhou tridou?
(odd<-exp(b[1]+b[2]+b[6]))
# A jakou ma pravdepodobnost, ze prezije
(prob<-odd/(1+odd))
# Jake sance na preziti ma dospely muz cestujici druhou tridou?
(odd<-exp(b[1]+b[2]+b[6]))
# A jakou ma pravdepodobnost, ze prezije
(prob<-odd/(1+odd))
# Závislost přeživších na jejich věkové skupině, třídě v lodi a pohlaví
m1 <- glm(dependent~titanic$Class+titanic$Age+titanic$Sex, family="binomial")
summary(m1)
titanic$Class
summary(m1)
b <- coef(m1)
b
b <- coef(m1)
b
library(DescTools)
library(TeachingDemos)
library(DescTools)
library(TeachingDemos)
library(ca)
library(MASS)
library(lmtest)
library(RcmdrMisc)
library(car)
library(datarium)
library(fmsb)
install.packages("DescTools")
install.packages("TeachingDemos")
install.packages("ca")
install.packages("lmtest")
install.packages("RcmdrMisc")
install.packages("car")
install.packages("datarium")
install.packages("fmsb")
install.packages("ggbio")
library(DescTools)
library(TeachingDemos)
library(ca)
library(MASS)
library(lmtest)
library(RcmdrMisc)
library(car)
library(datarium)
library(fmsb)
library(ggbio)
library(DescTools)
library(TeachingDemos)
library(ca)
library(MASS)
library(lmtest)
library(RcmdrMisc)
library(car)
library(datarium)
library(fmsb)
library(ggbio)
#-----------------------------------------------------------------------------
## ANOVA - analyza rozptylu
library(ggbio)
#-----------------------------------------------------------------------------
## ANOVA - analyza rozptylu
library(ggbio)
